JKD动态代理：
	1. static Class<?> getProxy(ClassLoader loader,Class<?>...interfaces)
		*创建一个动态代理类所对应的Class对象,该代理类将实现interfaces所指定的多个接口。
	
	2. static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h)
		*直接创建一个动态代理对象，实现了interfaces指定的系列接口，
		*执行代理对象的每个方法时都会被替换执行InvocationHandler对象的invoke方法
		//接口
		interface Person{
			void walk();
			void sayHello(String word);
		}
		//真实类
		public class PersonImpl implements Person{
			public void walk(){
				System.out.println("走路");
			}
			public void sayHello(String word){
				System.out.println(word);
			}
		}
		//日志功能
		public class MyLogger{
			public static void before(String methodName,String args){
				System.out.println("method:"+methodName+",arguments:"+args);
			}
			public static void after(String methodName,Object result){
				System.out.println("method:"+methodName+",result:"+result);
			}
			public static void throwing(){
				System.out.println("出现异常");
			}
		}
		//动态代理类
		public class ProxyUtil{
			//
			private PersonImpl personImpl;
			
			public ProxyUtil(PersonImpl personImpl){
				super();
				this.personImpl = personImpl
			}
			public Object getProxy(){	
			//this.getClass().getClassLoader():获取当前类的类加载器，用来加载代理对象所属类
			//PersonImpl.class.getInterfaces():获取目标对象实现的所有接口的Class，代理类会和目标实现相同的接口，通过代理对象实现功能		
				return Proxy.newProxyInstance(this.getClass().getClassLoader(),PersonImpl.class.getInterfaces(),
					new InvocationHandler(){
						public Object invoke(Object proxy,Method method,Object[] args){
							try{
								MyLogger.before(method.getName(),args)
								Person obj =(Person) method.invoke(personImpl,args);
								MyLogger.after(method.getName(),obj);
								return obj;
							}catch(Exception e){
								MyLogger.throwing();
								e.printStackTrace();
							}finally{
								System.out.println("finally");
							}
						}
					}
			});	
		}
		
		//测试类
		public class Test{
			public static void main(String[] args){
				ProxyUtil proxy = new ProxyUtil(new personImpl());
				Person person =(Person) proxy.getProxy();      //只能强转为接口类型(功能)
				person.walk();
				person.sayHello("你好！");
			}
		}
		
	3.