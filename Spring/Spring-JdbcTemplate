概述:
	1.	为了使JDBC更加易于使用，Spring在JDBC API上定义了一个抽象层，以此建立一个JDBC存取框架。
	2.	作为Spring JDBC框架的核心，JDBC模板的设计目的是为不同类型的JDBC操作提供模板方法，
	通过这种方式，可以在尽可能保留灵活性的情况下，将数据库存取的工作量降到最低。
	3.可以将Spring的JdbcTemplate看作是一个小型的轻量级持久化层框架。

导入jar包:
	1.IOC容器jar包5个
	2.JdbcTemplate的jar包
		1.spring-jdbc-4.0.0.RELEASE.jar
		2.spring-orm-4.0.0.RELEASE.jar
		3.spring-tx-4.0.0.RELEASE.jar
	3.数据库驱动和druid数据源

	*引用外部属性文件
			1.导入相应jar包(Druid和mysql-connectorjar包)
			2.编写配置文件datasource.xml(配置数据库连接和德鲁伊连接池)
			<!--第一种方式加载资源文件druid.properties-->
			<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer>
				<property name="location" value="druid.properties"></property>
			</bean>
			
			<!--第二种加载资源文件的方式,需要导入context命名空间-->
			<context:property-placeholder location="druid.properties"/>
			
			
			<!-- ${}:通过spring加载的资源文件获取目标值 -->
			<bean id="datasource" class="com.alibaba.druid.pool.DruidDataSource">
				<property name="driverClassName" value="${com.mysql.jdbc.Driver}"></property>
				<property name="url" value="${jdbc.url}"></property>
				<property name="username" value="${jdbc.username}"></property>
				<property name="password" value="${jdbc.password}"></property>
			</bean>
			
			3.获取druid数据库连接池
			ApplicationContext ac = new ClassPathXmlApplicationContext("datasource.xml");
			DruidDataSource ds = ac.getBean("database",DruidDataSource.class);
			4.使用数据库连接池
			ds.getConnection();

配置文件:
	1.导入context命名空间
	2.编写配置文件
		<!--   加载druid资源文件，获取配置信息		-->
		<context:property-placeholder location="druid.properties"/>
		<!--   使用配置信息创建数据源bean对象 		-->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
			<property name="driverClassName" value="${Driver}"></property>
			<property name="url" value="${url}"></property>
			<property name="username" value="${username}"></property>
			<property name="password" value="${password}"></property>
		</bean>
		<!--   使用JdbcTemplate封装druid数据源 		-->
		<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
	3.使用JdbcTemplate
		public class TestJdbcTemplate{
			ApplicationContext ac = new ClassPathXmlApplicationContext("jdbc.xml");
			JdbcTemplate template = ac.getBean("jdbcTemplate",JdbcTemplate.class);
			
			public void testUpdate(){
				jdbcTemplate.update("insert user values(null,"张三","24","男")");
				String sql="insert user values(null,?,?,?)";
				jdbcTemplate.update(sql,"李四","23","女");
			}
			<!--	批量操作 	-->
			public void testBatchUpdate(){
				String sql = "insert user values(null,?,?,?)";
				List<Object[]> list = new ArrayList<>();
				list.add(new Object[]{"a1",1,"男"});
				list.add(new Object[]{"a2",2,"男"});
				list.add(new Object[]{"a3",3,"男"});
				jdbcTemplate.batchUpdate(sql,list);
				<!-- 批量删除 -->
				String ids = "1,2,3";
				String sql2 = "delete from user where id in("+ids+")";
				jdbcTemplate.update(sql2);
				<!-- 模糊查询 -->
				String mohu = "a";
				String sql3 = "select * from user where name like concat('%',mohu,'%')";
				jdbcTemplate.queryForObject(sql3);
			}
		}