Redis主从复制：
	根据配置和策略，在主机数据更新后，自动同步到备机的master/slaver机制，master以写为主，slave以读为主。
	解决了单个redis服务器读写压力过大的问题，对读写操作进行分离，主写从读。
	
临时配置主从服务：
	1.复制redis根目录文件夹多份redis1、redis2、redis3等
	2.修改配置文件redis1-conf,redis2-conf,redis3-conf，设置端口port 6379 6380 6381...
	3.依次启动redis-server redis1-conf\redis2-conf\redis3-conf
	4.依次启动客户端redis-cli -h 127.0.0.1 -p 6379\6380\6381
	5.在redis2/redis3中使用命令：slaveof 127.0.0.1 6379,让redis1作为主机，redis2、3作为从机
	6.在从机中分别设置订阅：subscribe chat
	7.在主机中发布消息：publish chat “hello world!”
	
	登录对应端口的redis服务 : redis-cli -p 端口号
	查看主从状态信息 : info replication
	密码登录 : auth 123456
	
	从服务器只能读，不能写
	主服务可读可写。
	
	从机的数据永远与主机保持一致，不管是先启动还是后启动的从机，数据都和主机一致。
	
	当主机shutdown后，从机原地待命。
	
Redis主从同步策略:
	主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候
	都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。
	
	1.全量同步：
	Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份。具体步骤如下： 
	-  从服务器连接主服务器，发送SYNC命令； 
	-  主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令； 
	-  主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令； 
	-  从服务器收到快照文件后丢弃所有旧数据，载入收到的快照； 
	-  主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令； 
	-  从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；
	
	2.增量同步：
	Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。 
	增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。

	3.Redis实现快照的过程
->  Redis使用fork函数复制一份当前进程（父进程）的副本（子进程）；
->  父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入硬盘中的临时文件；
->  当子进程写入完所有数据后会用该临时文件替换旧的RDB文件，至此一次快照操作完成。
->  在执行fork的时候操作系统（类Unix操作系统）会使用写时复制（copy-on-write）策略，即fork函数发生的一刻父子进程共享同一内存数据，
    当父进程要更改其中某片数据时（如执行一个写命令 ），操作系统会将该片数据复制一份以保证子进程的数据不受影响，
	所以新的RDB文件存储的是执行fork一刻起的内存数据。
	
	Redis在进行快照的过程中不会修改RDB文件，只有快照结束后才会将旧的文件替换成新的，也就是说任何时候RDB文件都是完整的。

永久配置主从服务：
	在从机的配置文件中，找到slaveof <masterip> <masterport>,默认为注释状态
	开启配置为：slaveof 127.0.0.1 6379 即开启主从服务。
	
主从复制原理：
	1.每次从机联通后，都会给主机发送sync指令。
	2.主机会立刻进行存盘操作，向从机发送RDB文件。
	3.当从机收到RDB文件后，进行全盘加载，与主机的数据实现同步。
	4.之后主机的每次写操作，都会立刻发送给从机，从机执行相同的命令。
	
薪火相传：
	主机的从机可以作为其他服务器的主机，则该从机作为预备主机也能接受其他slave的连接和同步请求sync，但不能进行写操作
	这样可以有效减轻master的写压力，去中心化降低风险。但如果该从机宕机，其后面的从机将无法备份。
	如果主机发生宕机，则可以反客为主设置预备主机升级为主机，通过指令：
	恢复为主机：slaveof no one
	
哨兵模式：sentinel
	反客为主的自动版，能够后台监控主机是否故障，如果发生故障则根据投票数自动将从机转换为主机。
	
	配置哨兵：
	创建一个sentinel.conf文件在redis文件夹下，配置如下：
	port 哨兵端口
	sentinel monitor master 主机ip地址 主机端口 票数   
	
	通过redis-server sentinel.conf --sentinel开启哨兵
	
	哨兵的作用：
	1.通过发送命令，让redis服务器返回其运行状态并监测，包括主服务器和从服务器
	2.当哨兵监测到主服务器宕机，会自动的通过投票(多哨兵之间)将从服务器切换成主服务器,
	然后通知其他从服务器，修改其配置文件，让他们切换主机
	
	故障切换failover:
	当主机发生宕机后，哨兵1先监测到该结果，但系统不会马上进行failover操作，而仅仅是哨兵1发布通知，主观上认为当前主机不可用
这个过程称为主观下线。当其他的哨兵陆续监测到主机宕机了，且主观下线的数量达到设定值，那么哨兵之间就会进行一次投票vote-for-leader
,投票的结果由一个哨兵发起，并进行failover操作，在failover操作成功切换主机后，会发布通知，让其他的哨兵把自己监控的主服务器切换到
当前的主服务器，这个过程称为客观下线。
	
	新主机选择条件为：
	1.优先级靠前的，slave-priority的值越小优先级越高，一般默认为100
	2.偏移量最大的，偏移量是指获得原主机数据最多的
	3.runid最小的，每个redis服务器启动后都会随机生成一个40为的runid
	
	
	
	