CAS compare and swap 比较和交换
汇编语言 lock cmpxchg 用加锁的方式实现，保证原子性

synchronized实现过程:
	1.java代码： synchronized
	2.字节码: monitorenter monitorexit
	3.执行过程中自动升级
	4.cpu汇编代码: lock comxchg 保证原子性，比较和替换
Synchronized的HotSpot的实现
	1.new状态001 : 25位				31位 					1位      4位      1位      2位
			 unused  hashcode(如果调用了hashcode方法)      unused  分代年龄 偏向锁位 锁标志位
																			   0		01
	
	2.偏向锁状态101 ： 	  54位		         2位	 1位 		4位       1位        2位 
				 当前线程指针JavaThread*    Epoch   unused    分代年龄  偏向锁位   锁标志位 
																			1  		01
																			
	3.自旋锁状态00: 		 		 62位			    2位
					指向线程栈中Lock Record的指针	 锁标志位
														00
														
	4.重量级锁状态10:           	 62位				2位
					指向互斥量(重量级锁)的指针		 锁标志位
														10
														
	5.GC标记信息11 : 				 62位				2位
													 锁标志位
					CMS过程用到的标记信息				11
					
第一次加锁，即上偏向锁，在markword中会记录一个指向当前线程的指针，在下一次线程加锁的时候，判断该线程与markword指向的线程是否一致，
如果是同一个线程则不需要竞争，即它偏向加锁的第一个线程。hashCode备份在线程栈上 线程销毁，锁降级为无锁。

如果有另外一个线程来竞争这个锁，就升级为自旋锁，在每个线程的线程栈(虚拟机栈）记录自己的LockRecord，用CAS去争用对象markword的LR
的指针，指针指向哪个线程，哪个线程就获得自旋锁。

如果竞争变得激烈，有线程自旋超过10次， 参数可调-XX:PreBlockSpin，或者自旋线程数超过CPU核数(线程数)的一半，就升级为重量级锁，
需要向操作系统申请锁资源，该锁由操作系统分配，所有竞争重量级锁的线程进入等待队列，等待OS的调度获得锁来继续执行。
重量级锁是用户态 -> 内核态的转换，效率较低，但相对于多线程的自旋，消耗的CPU资源更少，自旋是会消耗CPU资源的，而等待队列不消耗CPU。

jdk1.6之后，加入自适应自旋 Adapative Self Spinning ， 由JVM自己控制

锁消除 lock eliminate
	如果锁对象的引用只在当前方法中使用，即只存在于当前线程栈的局部变量表中，则该引用是非共享资源，那么JVM 会自动消除该引用指向的锁对象的锁。

锁粗化 lock coarsening	
	JVM 检测到一连串的操作都对同一个对象加锁，为了避免不断的加锁、解锁操作，对锁进行粗化，对整个一连串操作进行加锁，从而避免频繁的解锁，减少CPU的消耗。

锁降级（不重要）
	被VM的GC线程访问，即需要被回收时，会进行锁降级，通常不会手动降级，所以可认为锁降级不存在。

volatile如何解决指令重排序
	
	1: volatile i

	2: ACC_VOLATILE

	3: JVM的内存屏障(一种规范) LoadLoad,StoreStore,LoadStore,StoreLoad , Load为读操作，Store为写操作		
	​	屏障两边的指令不可以重排！保障有序！
		在volatile修饰的指令前后都加一层内存屏障，前一层屏障是禁止前面的指令后执行，后一层屏障是禁止后面的指令优先执行。
		
		1.在每个volatile写操作的前面插入一个StoreStore屏障。在每个volatile写操作的后面插入一个StoreLoad屏障。
		2.在每个volatile读操作的前面插入一个LoadLoad屏障。在每个volatile读操作的后面插入一个LoadStore屏障。

	4：hotspot实现
	
	当线程对一个volatile修饰的变量进行写操作时，该线程会将本地内存中变量的新值写到主内存中，并通知其他线程获取这个新的值。
	当线程对一个volatile修饰的变量进行读操作时，该线程会将本地内存中的变量设置为无效的。
	
伪共享：当多个线程同时修改一个缓存行里面的多个变量时候，由于同时只能有一个线程操作缓存行(数据的一致性MESI)，所以相比每个变量放到一个缓存行性能会有所下降，这就是伪共享。
	
	
CPU保证数据的一致性:
	1.如果MESI能解决则用MESI
	2.否则使用锁总线的方式
	
CPU保证有序性:
	1.内存屏障sfence mfence lfence
	2.锁总线
	
AQS: CAS + volatile + queue 抽象对象同步器