how to find a garbage如何找到垃圾?
垃圾定位算法：
	1.reference count 引用计数法RC
		缺点：无法找到循环引用垃圾
		
	2.Root Searching 根搜索法(根可达算法)
		根据根对象，逐个查找引用，能被找到的就不是垃圾
		GC roots 有哪些根对象 : 
			根据JVMS(java虚拟机规范)
			1.JVM stack 虚拟机栈，如线程栈变量
			2.native method stack 本地方法栈，如JNI指针
			3.run-time constant pool 运行时常量池
			4.static references in method area 方法区静态引用
			5.Clazz
		
回收算法GC Algorithms:
	1.Mark-Sweep 标记清除算法
		会产生内存碎片，可能导致连续的内存空间不足
		1.标记阶段：找到所有可访问的对象，做个标记 
		2.清除阶段：遍历堆，把未被标记的对象回收
		
	2.Copying 复制算法
		1.主要用在新生代区，Eden、survivor0、survivor1
		2.将内存一分为二，一半是需要回收的内存，一半是未使用的内存，将有用的内存空间复制到未使用的内存空间
		3.缺点: 
			1.会造成一部分内存的浪费，一次只用一半，不过可以根据实际情况，将内存块大小比例适当调整
			2.如果存活对象的数量比较大，copying的性能会变得很差			
		4.优点：
			在存活对象不多的情况下，性能高，能解决内存碎片和标记清除算法中导致的引用更新问题。
	详细回收细节:
		从Eden区存活的对象会放入S0，当S0内存不够了，开始执行GC操作，这个时候将会把eden和S0中存活的对象拷贝到S1区，然后对S0的内存进行清理，
		反过来，当S1内存不够了，同样将eden和S1中存活的对象拷贝到S0,然后对S1进行内存清理,如此反复多次，如果有些对象依然没被回收(一般15次，每GC一次，分代年龄+1)，
		会将其放入old区(老年代)
		
		(复制算法的反复次数由JVM参数MaxTenuringThreshold决定,PSPO默认是15,CMS默认是6，G1默认15,ZGC没有，因为不分代)
		
		Eden区、SO区、S1区的内存比例大小是8:1:1 ，该值是经过经验总结得出，此比例的回收效率最高。
		
	HotSpot实现的复制算法流程如下:

		1. 当Eden区满的时候,会触发第一次Minor gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发Minor gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。

		2. 当后续Eden又发生Minor gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。

		3. 部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代。
		
	
	3.Mark-Compact 标记整理或标记压缩算法
		一般使用在old区，垃圾少，效率比copying略低，因为要进行对象的移动
		1.标记阶段：找到所有可访问的对象，做个标记
		2.整理阶段：遍历堆，把未被标记的对象回收，并将被标记的存活对象进行移动，整理出连续的内存空间
		3.发生在老年代的GC称为Major GC，其经常会伴随至少一次的Minor GC(并非绝对，在Parallel Scavenge收集器中就有直接进行Full GC的策略选择过程)。Major GC的速度一般会比Minor GC慢10倍以上。

		针对老年代对象存活率高的特点，提出了一种称之为”标记-整理算法”。
        标记过程仍与”标记-清除”过程一致，但后续步骤不是直接对可回收对象进行清理，而是让所有存活对象都向一端移动，然后直接清理掉端边界以外的内存。

在新生代进行的GC叫做minor GC，在老年代进行的GC都叫major GC，Full GC同时作用于新生代和老年代。
		
新对象分配路线 ：
	1.栈上分配
		 - 线程私有小对象
		 - 无逃逸(只在本方法中存在引用，没有被本方法外的其他变量引用)
		 - 支持标量替换
		 - 无需调整(JVM内部配置好了)
	
	2.线程本地分配TLAB（Thread Local Allocation Buffer 线程专有分配缓存区）
		 - 占用eden，默认1%
		 - 多线程的时候不用竞争eden就可以申请空间，提高效率
		 - 小对象
		 - 无需调整
	
	3.老年代
		- 大对象
		
	4.eden

