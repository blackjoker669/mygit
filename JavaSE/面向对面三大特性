封装：
	隐藏类的实现细节，提供公用方法来实现功能。增强了代码的安全性和内聚性，降低对象之间的耦合性。

继承:
	是实现代码复用的重要手段。对一种功能需要增强，通过继承父类，在子类中定义需要增强的功能即可，不需要重新写一个类。

多态：
	将一个子类对象直接赋给父类引用变量或者接口类型的引用变量，相同类型的对象(子类引用的子类对象，和父类引用的子类对象)调用同一个
	方法时，会自动向上转型，从而呈现出多种不同的行为特征。
	
	通过方法重写体现多态：
	  class Animal{               
		public void eat(){"Animal eat1"};
	  }
	  class Dog extends Animal {
		public void eat(){"Dog eat"}
	  }
	Animal animal = new Dog();    animal.eat();  
	Dog dog = new Dog();		dog.eat();	//dog和animal引用的是同种类型对象
					
	表现形式：
	1、方法重载；
	2、方法重写；
	3、抽象类；
	4、接口。
	
	方法重写Override: 发生在继承父类和实现接口，在子类或实现类中覆盖(重写)同名的方法。
		1.方法名相同、参数列表相同。
		2.子类返回值类型与父类返回值类型相同或者继承自父类返回值类型，即小于等于父类返回值类型；
		3.子类抛出的异常类型与父类抛出的异常类型相同或继承自父类抛出异常类型，即小于等于父类抛出异常类型；
		4.子类方法的访问权限大于等于父类方法的访问权限。
		
	方法重载Overload：发生在同一类中，参数列表不同的同名方法，与访问修饰符、返回值类型无关，如构造器重载。
	
	抽象类：一种特殊的类，用abstract修饰，可以包含抽象方法，但不能创建实例。
		1.抽象类必须用abstract修饰。
		2.抽象类不能被实例化。
	接口：
		1.接口使用interface修饰
		2.接口只能被实现
		3.接口没有构造器，没有初始化块。
		4.接口里的成员变量必须是static修饰，方法只能是抽象方法、类方法、默认方法或私有方法。
		
	一个类可以实现多个接口但只能继承一个类。接口只能继承接口，不能继承类。