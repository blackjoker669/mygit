类的加载机制分为1.加载 2.连接 3.初始化
1.加载：
加载过程主要完成三件事情：
	1.通过类的全限定名来获取定义此类的二进制字节流
	2.将这个类字节流代表的静态存储结构转为方法区的运行时数据结构
	3.在堆中生成一个代表此类的java.lang.Class对象，作为访问方法区这些数据结构的入口。
	
2.连接:
连接过程负责把类的二进制数据合并到JRE中。
类的连接分为3个阶段:
	1.验证:检验被加载的类是否有正确的内部结构，并和其他的类协调一致。
	2.准备:为类的类变量分配内存空间，并设置默认初始值
	3.解析:将类的二进制数据中的符号引用替换成直接引用
		符号引用：用文本形式来表示引用关系
		直接引用：偏移量，虚拟机可以通过直接引用在该类的内存区域中找到方法字节码的起始位置
		
3.初始化：
JVM对类进行初始化
	1.如果该类还没有被加载和连接，则先进行加载和连接
	2.如果父类没有进行初始化则先对父类进行初始化
	3.执行类中的初始化语句
	

	
类加载器:
	1.BootStrap ClassLoader:根/引导类加载器，是c语言实现，负责加载Java的核心类。
	2.Extension ClassLoader:扩展类加载器
	3.System ClassLoader: 系统类加载器

类加载机制:
	1.全盘负责:当一个类加载器对一个Class进行加载时，该Class所依赖的和引用的其他Class都由该类加载器进行加载。
	2.父类委托:先让父类加载器试图加载该Class,只有在父类加载器无法加载该类时，才尝试从自己的类路径中加载该类。
	3.缓存机制:保证所有加载过的Class都被缓存，当程序中需要使用某个Class时，类对应的二进制数据，并将其转换为Class对象，存入缓存区中。